;;;;;; Martini lipid topology for C(d24:1/24:0) SM (DXSM), generated using:
; The Martini lipid itp generator version 0.4  Args are: -o martini_v2.0_DXSM_01.itp -alname DXSM -alhead 'C P' -allink 'A A' -altail 'TCCCC CCCCCC'
; WARNING: Lipids topology was generated following the Martini 2.0 guidelines but this specific lipid type might
;          not have been tested and should therefore be used with care. 
;
; Description:
;   A general model sphingomyelin (SM) lipid corresponding to atomistic e.g. C(d24:1/24:0) tails.
; Parameterization:
;   This topology follows the standard Martini 2.0 lipid definitions and building block rules.
; Reference(s): 
;   S.J. Marrink, A.H. de Vries, A.E. Mark. Coarse grained model for semi-quantitative lipid simulations. JPC-B, 108:750-760, 
;   2004. doi:10.1021/jp036508g 
;   S.J. Marrink, H.J. Risselada, S. Yefimov, D.P. Tieleman, A.H. de Vries. The MARTINI force field: coarse grained model for 
;   biomolecular simulations. JPC-B, 111:7812-7824, 2007. doi:10.1021/jp071097f 
;   T.A. Wassenaar, H.I. Ingolfsson, R.A. Bockmann, D.P. Tieleman, S.J. Marrink. Computational lipidomics with insane: a versatile 
;   tool for generating custom membranes for molecular simulations. JCTC, 150410125128004, 2015. doi:10.1021/acs.jctc.5b00209
; Created: 2015.04.20
;
;@INSANE alhead=C P, allink=A A, altail=TCCCC CCCCCC, alname=DXSM, charge=0.0
;@RESNTEST DXS==DXSM if: atoms[0]==NC3
;@BEADS NC3 PO4 AM1 AM2 T1A C2A C3A C4A C5A C1B C2B C3B C4B C5B C6B 
;@BONDS NC3-PO4 PO4-AM1 AM1-AM2 AM1-T1A T1A-C2A C2A-C3A C3A-C4A C4A-C5A AM2-C1B C1B-C2B C2B-C3B C3B-C4B C4B-C5B C5B-C6B 
;

[moleculetype]
; molname      nrexcl
  DXSM          1

[atoms]
; id 	type 	resnr 	residu 	atom 	cgnr 	charge
   1 	Q0 	 1 	DXSM 	NC3 	 1 	1.0 	
   2 	Qa 	 1 	DXSM 	PO4 	 2 	-1.0 	
   3 	P1 	 1 	DXSM 	AM1 	 3 	0 	
   4 	P5 	 1 	DXSM 	AM2 	 4 	0 	
   5 	C3 	 1 	DXSM 	T1A 	 5 	0 	
   6 	C1 	 1 	DXSM 	C2A 	 6 	0 	
   7 	C1 	 1 	DXSM 	C3A 	 7 	0 	
   8 	C1 	 1 	DXSM 	C4A 	 8 	0 	
   9 	C1 	 1 	DXSM 	C5A 	 9 	0 	
  10 	C1 	 1 	DXSM 	C1B 	10 	0 	
  11 	C1 	 1 	DXSM 	C2B 	11 	0 	
  12 	C1 	 1 	DXSM 	C3B 	12 	0 	
  13 	C1 	 1 	DXSM 	C4B 	13 	0 	
  14 	C1 	 1 	DXSM 	C5B 	14 	0 	
  15 	C1 	 1 	DXSM 	C6B 	15 	0 	

[bonds]
;  i  j 	funct 	length 	force.c.
   1  2 	1 	0.47 	1250 	
   2  3 	1 	0.47 	1250 	
   3  4 	1 	0.37 	1250 	
   3  5 	1 	0.47 	1250 	
   5  6 	1 	0.47 	1250 	
   6  7 	1 	0.47 	1250 	
   7  8 	1 	0.47 	1250 	
   8  9 	1 	0.47 	1250 	
   4 10 	1 	0.47 	1250 	
  10 11 	1 	0.47 	1250 	
  11 12 	1 	0.47 	1250 	
  12 13 	1 	0.47 	1250 	
  13 14 	1 	0.47 	1250 	
  14 15 	1 	0.47 	1250 	

[angles]
;  i  j  k 	funct 	angle 	force.c.
   2  3  4 	2 	120.0 	25.0 	
   2  3  5 	2 	180.0 	25.0 	
   3  5  6 	2 	180.0 	45.0 	
   5  6  7 	2 	180.0 	25.0 	
   6  7  8 	2 	180.0 	25.0 	
   7  8  9 	2 	180.0 	25.0 	
   4 10 11 	2 	180.0 	25.0 	
  10 11 12 	2 	180.0 	25.0 	
  11 12 13 	2 	180.0 	25.0 	
  12 13 14 	2 	180.0 	25.0 	
  13 14 15 	2 	180.0 	25.0 	


; Include Position restraint file
#ifdef POSRES
#include "DXSM_posre.itp"
#endif
